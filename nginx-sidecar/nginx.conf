events {
    worker_connections 1024;
}

http {
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /usr/local/openresty/nginx/logs/access.log main;
    error_log /usr/local/openresty/nginx/logs/error.log debug;
    server {
        listen 8080;
        # NGINX will reject anything not matching /api

        location /hello {
           # Set additional headers to preserve request details
          proxy_set_header X-Original-Method $request_method;
          proxy_set_header X-Original-URI $request_uri;
          proxy_set_header X-Original-Query $query_string;

                    # Optionally, you can set more headers to preserve other request details
          proxy_set_header X-Original-Remote-Addr $remote_addr;
          proxy_set_header X-Original-Host $host;
          proxy_set_header X-Original-Scheme $scheme;

           proxy_pass_request_headers on;
           proxy_pass_request_body on;
           proxy_pass http://hello-world-service-example:8081/hello;


           content_by_lua_block {
                 ngx.log(ngx.DEBUG, "Inside the word of Lua")
                 ngx.log(ngx.DEBUG, ngx.req.get_method())

                 local headers = ngx.req.get_headers()

                  local headers_str = ""
                   for k, v in pairs(headers) do
                        headers_str = headers_str .. k .. ": " .. v .. "\n"
                   end


                   ngx.log(ngx.DEBUG, "Request headers:\n", headers_str)
                   ngx.log(ngx.DEBUG, headers_str)
                   ngx.log(ngx.DEBUG, "Response body: ", ngx.balancer.get_body())

                   local response_status, response_headers, response_body = ngx.balancer.get_status(), ngx.balancer.get_headers(), ngx.balancer.get_body()

                   local http = require "resty.http"
                   local httpc = http.new()
                   local res, err = httpc:request_uri("http://hello-world-service-example:8081/publish", {
                                     method = ngx.req.get_method(),
                                     headers = ngx.req.get_headers(),
                                      body = ngx.req.get_body_data()
                                   })

                    if not res then
                        ngx.status = 500
                        ngx.say("Failed to request: ", err)
                         return ngx.exit(500)
                    end

                    ngx.say(response_status)
                    ngx.say(response_headers)
                    ngx.say(response_body)
            }
        }
    }
    }